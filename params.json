{"name":"Newvisdock","tagline":"VisDock 1.0","body":"VisDock\r\n=======\r\n\r\nVisDock Libraries\r\n----------------------------------------------------------------------------------------------------\r\nVisDock is an interactive web-visualization framework written in JavaScript. VisDock allows visualization\r\ncreators to import various VisDock tools into their host visuailzations for exploration and annotation\r\npurposes.\r\n\r\n### VisDock.js\r\nVisDock.js library contains various tools: such tools include cross-cutting selection tools,\r\npan/zoom tool, query management tools, and annotation tools. VisDock can be imported into any SVG\r\nrendered visualizations.\r\n\r\n### 2D.js and IntersectionLibrary.js\r\nThese libraries provide functions to determine whether the user-drawn shapes or lines cross the\r\nboundaries of SVG objects. These files were obtained from Kevin Lindsey Software Development\r\n(www.kevlindev.com). Cross-cutting selections can be made between:\r\n- Path and Polygon\r\n- Path and Elllipse\r\n- Path and Line\r\n- Polygon and Polygon\r\n- Polygon and Ellipse\r\n- Polygon and Line\r\n- Ellipse and Ellipse\r\n- Ellipse and Line\r\n- Line and Line\r\n\r\n### visdock.utils.js\r\n2D.js and IntersectionLibrary.js provide functions to determine the intersection of any two SVG objects. For\r\nVisDock.js users, the type of intersection is limited to between user-drawn shapes (polygons, ellipses, and\r\nlines) and SVG objects in the host visualization. visdock.utils.js summarizes these intersections in a\r\nmore compact form.\r\n\r\n#### Functions for Initializations and Sub-classes\r\nOnce the users have drawn a shape using Polygon, Lasso, or Rectangle tool, the array of \r\nthe x and y coordinates of the verticies will be passed to the VisDock event handler. This array cannot \r\nbe used directly for the verification of intersection because the 2D.js and IntersectionUtilities.js libraries require\r\nspecific object formats. The following functions initialize path, polygon, ellipse, and line elements \r\nfrom the \r\nIn order to check the intersection between shapes, it may require to initialize the shapes as\r\nan SVG shape class before passing them as argument. Here are the functions that initialize such shapes.\r\nBut note that not all shapes need to be initialized. We will explain further when an object needs to be\r\ninitialized.\r\n  - createPolygon (points): initializes a polygon object created when Lasso, Polygon, and Rectangle selections\r\nare made.\r\n<br>\r\n<pre><code>var NewPolygon = new createPolygon(points)\r\n</code></pre>\r\n    + points: when the users use Lasso, Polygon, and Rectangle tools, VisDock stores an array of points\r\nfor the lasso, polygon, and rectangle in the array form [[x1, y1], [x2, y2], [x3, y3], ... , [xn, yn]].<br>\r\n    + Sub-classes: its sub-classes are used to verify intersection between NewPolygon and any SVG object.\r\n<ul>\r\n     <li> NewPolygon.intersectPath(path, inclusive): checks the inclusive/exclusive intersection between\r\nNewPolygon and an SVG path element.\r\n     <li> NewPolygon.intersectPolygon(polygon, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewPolygon and an SVG polygon element.\r\n     <li> NewPolygon.intersectEllipse(path, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewPolygon and an SVG ellipse element.\r\n     <li> NewPolygon.intersectLine(path, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewPolygon and an SVG line element.\r\n</ul>\r\n<br>\r\n  \r\n  - createEllipse (points): initializes an ellipse object created when Ellipse selections are made.\r\n<br>\r\n<pre><code>var NewEllipse = new createEllipse(points)\r\n</code></pre>\r\n    + points: when the users use Ellipse tool, VisDock stores an array of points for such ellipse\r\nin the form [cx, cy, r1, r2]. <br>\r\n    + Sub-classes: its sub-classes are used to verify intersection between NewEllipse and any SVG object.\r\n<ul>\r\n     <li> NewEllipse.intersectPath(path, inclusive): checks the inclusive/exclusive intersection between\r\nNewEllipse and an SVG path element.\r\n     <li> NewEllipse.intersectPolygon(polygon, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewEllipse and an SVG polygon element.\r\n     <li> NewEllipse.intersectEllipse(path, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewEllipse and an SVG ellipse element.\r\n     <li> NewEllipse.intersectLine(path, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewEllipse and an SVG line element.\r\n</ul>\r\n<br>\r\n    \r\n  - createLine (points): initializes a line/polylinee object created when StraightLine, Polyline and Freeselect\r\nselections are made.\r\n<br>\r\n<pre><code>var NewLine = new createLine(points)\r\n</code></pre>\r\n    + points: when the user uses StraightLine, Polyline, and Freeselection tools, VisDock stores an\r\narray of points for such in the form [[x1, y1], [x2, y2], [x3, y3], ... , [xn, yn]]. Note that if the line\r\nis a straight line, the array would contain only 2 elements.\r\n<br>\r\n    + Sub-classes: its sub-classes are used to verify intersection between NewLine and any SVG object.\r\n<ul>\r\n     <li> NewLine.intersectPath(path, inclusive): checks the inclusive/exclusive intersection between\r\nNewLine and an SVG path element.\r\n     <li> NewLine.intersectPolygon(polygon, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewNew and an SVG polygon element.\r\n     <li> NewLine.intersectEllipse(path, inclusive): checks the inclusive/exclusive intersection\r\nbetween NewLine and an SVG ellipse element.\r\n     <li> NewLine.intersectLine(path, true): checks the inclusive intersection\r\nbetween NewLine and an SVG line element (note that there cannot be any exclusive intersection between\r\na line and another line).\r\n</ul>\r\n<br> \r\n    \r\n#### Other important functions:\r\nInside the visdock class are a few important functions that are desgined to aid proper display of the layers. \r\nThe newly created layers have visibility and color attributes. Some of these functions can add/change these\r\nattributes as the users desire.\r\n  - Query attributes retrieval: the following functions return the color and visibility attributes of the\r\nquery.\r\n    + VisDock.utils.getQueryColor(index): returns the RGB color (#0000FF) or color name (blue) of the query. The\r\ninput argument is the index of the query.<br>\r\n    + VisDock.utils.getQueryVisibility(index): returns the visibility of the query layers.\r\n    \r\n  - Layer management: the following functions create layers for the queried objects.\r\n\r\n    + VisDock.utils.addPathLayer(path): creates an SVG path layer on top of the SVG path element\r\npassed as argument. Its 'path data' attribute would be the same but its color and visibility attributes are\r\ngoverned by Query Manager. Its 'class' attribute would be \"VisDockPathLayer.\"\r\n<br>\r\n    + VisDock.utils.addPolygonLayer(polygon): creates an SVG polygon layer on top of the SVG polygon element\r\npassed as argument. Its 'points' attribute would be the same but its color and visibility attributes are\r\ngoverned by Query Manager. Its 'class' attribute would be \"VisDockPolygonLayer.\" \r\n<br>\r\n    + VisDock.utils.addEllipseLayer(ellipse): creates an SVG ellipse layer on top of the SVG ellipse element\r\npassed as argument. Its radii and center cooridinates attributes would be the same but its color and visibility\r\nattributes are governed by Query Manager. Its 'class' attribute would be \"VisDockEllipseLayer.\"\r\n<br>\r\n    + VisDock.utils.addLineLayer(line): creates an SVG line/polyline layer on top of the SVG line/polyline\r\nelemtnt passed as argument. Its 'points' attribute would be the same but its color and visibility attributes\r\nare governed by Query Manager. Its 'class' attribute would be \"VisDockLineLayer.\"\r\n<br>\r\n    + VisDock.utils.addTextLayer(label): creates an SVG label layer on top of the SVG label\r\nelemtnt passed as argument. Its 'style' attribute and text would be the same but its color and visibility\r\nattributes are governed by Query Manager. Its 'class' attribute would be \"VisDockTextLayer.\"\r\n\r\n<a href=\"https://github.com/VisDockHub/NewVisDock/blob/master/Tutorial.md\">Go to VisDock Tutorials</a>\r\n------------------------------------------------------------------------------------------------------\r\n<a href=\"https://github.com/VisDockHub/NewVisDock/blob/master/examples.md\">Go to VisDock Examples</a>\r\n------------------------------------------------------------------------------------------------------\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}